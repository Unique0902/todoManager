# ✅ 최종 전체 시스템 계획 (4차 피드백 반영)

## 1. **핵심 컨셉**
- 목표, 프로젝트, 마일스톤, 루틴, 할일, 기타할일, 아이디어(버킷리스트) 등 다양한 실행 단위를 **트리 구조**로 관리하는 자기관리/생산성 시스템.
- 각 노드는 명확한 타입과 역할, 그리고 부모-자식 관계 규칙을 가짐.
- 루틴, 감정일기, 오늘의 할일, 피드백 등 일상적 실천과 회고까지 포괄.
- AI 추천/자동화는 MVP에서는 제외, 추후 확장.

---

## 2. **노드 타입 및 관계**

| 타입             | 설명                                 | 자식 가능 | 마일스톤 특성 가능 | 비고/특이사항 |
|------------------|--------------------------------------|-----------|-------------------|--------------|
| goal             | 방향성/추상적 목표, 기간 없이도 존재 가능 | O         | O                 | 트리의 중심, 하위 목표 포함 |
| project          | 구체적 실행 단위, 기간 필수(start/end) | O         | O                 | 여러 할일/루틴/마일스톤/하위 프로젝트 포함 가능 |
| milestone_group  | 마일스톤 묶음, 순서 중요              | O(마일스톤만) | O              | 자식은 is_milestone: true 자동 부여 |
| task             | 구체적 할일, 단발성                   | X         | O                 | 날짜 가능, 체크 가능, milestone_group 내 순서(order_index) |
| other_task       | 기타 단발 일정                        | X         | X                 | 캘린더/홈에만 표시 |
| routine          | 반복 습관, **수행률/난이도 조정/카테고리** | X         | X                 | 감정일기 루틴 등, category 필드(정형 분류), tags 필드 없음 |
| aspiration       | 하고 싶은 일/아이디어 저장소          | X         | X                 | 별도 페이지, 트리와 무관, linked_goal_id(추후 전환 대비) |

- **마일스톤 특성**: type이 아니라 속성(is_milestone: true). milestone_group의 자식으로 생성 시 자동 부여.
- **milestone_date**: is_milestone: true인 goal/project/task에서만 필수.
- **order_index**: milestone_group 내 마일스톤 순서 지정.

---

## 3. **진행률/수행률/통계 정책 (4차 피드백 반영)**

### **진행률 계산 기준**
- **goal, project, milestone_group만 표시** (자식에 루틴이 없을 때만)
- 자식 중 체크 가능한 항목(task, project 등) 기준, 모두 완료 시 100%
- **루틴이 포함된 경우 진행률에서 제외** → UI에 "루틴은 진행률에 포함되지 않음" 표시

### **루틴 수행률 계산 기준 (구체화)**
- **예시**: 주 3회 루틴의 경우 해당 주에 몇 번 수행했는지 %로 표시
- **계산 방식**: (실제 수행 횟수 / 예상 수행 횟수) × 100
- **표시 방법**: 주간/월간 단위로 수행률 표시, 연속 성공일 수, 난이도 조정 히스토리 등 별도 지표

### **분석/통계**
- **프로젝트/마일스톤**: 진행률, 달성률, 기간별 완료율
- **루틴**: 수행률, 연속 성공, 난이도 조정 패턴, 요일/시간대별 수행률
- **전체 집중도**: 요일/주/월별 활동량, 히트맵

---

## 4. **감정일기(Emotion Journal) 정책 (4차 피드백 반영)**

### **mood_tag 구조 확장**
- **기본 제공 감정 예시**: '기쁨', '불안', '좌절', '보람', '화남', '무감정'
- **mood_tag 타입**: ENUM이 아닌 **TEXT**로 설정
- **기능**: 기본 감정 선택 + **사용자 정의 감정 추가** 기능 제공
- **유연성**: 사용자가 원하는 감정 태그를 자유롭게 추가 가능

### **기본 구조**
- 하루에 여러 개 작성 가능, 날짜 기준
- 루틴과 직접 연결되는 구조는 아님(단, 감정일기 루틴이 있을 수는 있음)
- 홈페이지 "오늘 하루 피드백"에서 감정일기 작성 유도

---

## 5. **루틴과 태스크 구분 명확화 (4차 피드백 반영)**

### **루틴 vs 태스크 구분 예시**
- **루틴**: 반복 (예: 매일 운동, 주 3회 독서, 매주 일요일 명상)
- **태스크**: 단발 (예: 내일 병원 예약하기, 이번 주 보고서 제출, 다음 달 회의 준비)

### **UI/UX 적용**
- 사용자 문맥이나 도움말에 명확히 표현
- 루틴 생성 시 "반복되는 습관" 안내
- 태스크 생성 시 "한 번만 하는 일" 안내
- 사용자가 헷갈리지 않도록 명확한 가이드 제공

---

## 6. **트리뷰(목표트리) 정책**

- 피그마 스타일 드래그/확대/축소/이동
- 자식 노드 추가만 가능, 수정/삭제는 상세페이지에서
- 각 노드 클릭 시 상세페이지 이동
- **필터**: 루틴/할일 숨기기 기능(복잡한 트리 시 가독성 향상)
- **노드 고정**: 자주 사용하는 goal/project 상단 고정(즐겨찾기)

---

## 7. **루틴 관리 정책**

- **category** 필드로만 유형 구분(예: 감정일기, 운동, 외형관리 등), **tags 필드 없음**
- **difficulty_history**:  
  - change_type(increase/decrease/modify)로 명확히 구분  
  - reason(선택 입력), before/after_description 필수  
- **history_log**: 루틴 전체 내용 변경 이력(수정/변경 시마다 기록)
- **수행 이력**: performed_count, performed_dates 등
- **프로젝트의 자식으로 routine 허용**:  
  - routine이 자식에 포함될 경우 진행률 계산에서 제외

---

## 8. **aspiration(아이디어/버킷리스트) 정책**

- 하고 싶은 일, 아이디어, 도전하고 싶은 것 등 별도 페이지에서 관리
- 중요도, 카테고리, 작성일, linked_goal_id(추후 목표/프로젝트 전환 대비) 등 필드
- 트리와 직접 연결되지 않음

---

## 9. **데이터 구조(스키마) 예시**

### **공통 필드**
```sql
id, type, title, parent_id, description, order, created_at, updated_at, deleted
```

### **goal/project/task**
```sql
is_milestone (boolean)
milestone_date (nullable, is_milestone: true일 때만)
order_index (milestone_group 내 순서)
start_date, end_date (project)
due_date (task, other_task)
checked (task, other_task)
```

### **routine**
```sql
start_date, frequency, category
performed_count, performed_dates
difficulty_history (JSON: change_type, reason, before/after_description, date)
history_log (수행 이력)
created_at, updated_at
```

### **aspiration**
```sql
category, importance, linked_goal_id (nullable, 추후 목표 전환 대비)
created_at
```

### **emotion_journal**
```sql
id, date, content, created_at, mood_tag (TEXT, nullable, 사용자 정의 가능)
```

---

## 10. **기타 정책**

- **soft-delete**: deleted 필드로 소프트 삭제, 복구/히스토리 기능 대비
- **모든 히스토리(수정/삭제/난이도 등) 기록**: 데이터 신뢰성 및 분석 확장성 확보

---

## 11. **개발/설계 우선순위**

1. **데이터베이스 스키마 상세 설계** (4차 피드백 반영)
2. **API 엔드포인트 설계**
3. **컴포넌트 구조 설계** (홈, 트리뷰, 루틴, 감정일기, 캘린더, 분석, 아이디어)
4. **MVP**: 홈/트리뷰/루틴/감정일기 우선 개발
5. **캘린더/분석/아이디어는 2차 개발**

---

## 12. **4차 피드백 반영 주요 변경사항**

✅ **루틴 수행률 계산 기준 구체화**: 예상 횟수 대비 실제 수행 % 표시 방식 명확화
✅ **mood_tag 구조 확장**: TEXT 타입으로 변경, 기본 감정 + 사용자 정의 감정 추가 기능
✅ **루틴과 태스크 구분 명확화**: UI/도움말에 반복 vs 단발 구분 명시
✅ **진행률 제외 안내**: 루틴이 포함된 경우 UI에 "루틴은 진행률에 포함되지 않음" 표시

---

이 구조와 정책을 기준으로 개발을 진행하면 되고,  
추가로 보완하거나 강조하고 싶은 점이 있으면 언제든 알려줘!  
이 정리를 계속 참고해서 설계/구현을 이어가면 돼. 