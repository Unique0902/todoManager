# ✅ 최종 전체 시스템 계획 (10차 피드백 반영)

## 1. **핵심 컨셉**
- 목표, 프로젝트, 마일스톤, 루틴, 할일, 기타할일, 아이디어(버킷리스트) 등 다양한 실행 단위를 **트리 구조**로 관리하는 자기관리/생산성 시스템.
- 각 노드는 명확한 타입과 역할, 그리고 부모-자식 관계 규칙을 가짐.
- 루틴, 감정일기, 오늘의 할일, 피드백 등 일상적 실천과 회고까지 포괄.
- AI 추천/자동화는 MVP에서는 제외, 추후 확장.

---

## 2. **트리 구조 핵심 설명 요약**

### **목표(goal) 중심 트리 구조**
- 목표(goal) 중심 트리 구조, 각 노드는 명확한 타입
- 프로젝트(project)는 기간을 가지며 goal, task, routine 등을 포함 가능
- 마일스톤은 타입이 아니라 특성 (is_milestone: true)
- milestone_group 하위 노드는 자동으로 마일스톤 특성

### **노드 타입 및 관계**

| 타입             | 설명                                 | 자식 가능 | 마일스톤 특성 가능 | 비고/특이사항 |
|------------------|--------------------------------------|-----------|-------------------|--------------|
| goal             | 방향성/추상적 목표, 기간 없이도 존재 가능 | O         | O                 | 트리의 중심, 하위 목표 포함 |
| project          | 구체적 실행 단위, 기간 필수(start/end) | O         | O                 | 여러 할일/루틴/마일스톤/하위 프로젝트/하위 goal 포함 가능 |
| milestone_group  | 마일스톤 묶음, 순서 중요              | O(마일스톤만) | O              | 자식은 is_milestone: true 자동 부여 |
| task             | 구체적 할일, 단발성                   | X         | O                 | 날짜 가능, 체크 가능, milestone_group 내 순서(order_index) |
| other_task       | 기타 단발 일정                        | X         | X                 | 캘린더/홈에만 표시, 체크 기능 없음 |
| routine          | 반복 습관, **수행률/난이도 조정/카테고리** | X         | X                 | 감정일기 루틴 등, category 필드(정형 분류), tags 필드 없음 |
| aspiration       | 하고 싶은 일/아이디어 저장소          | X         | X                 | 별도 페이지, 트리와 무관, linked_goal_id(추후 전환 대비) |

- **마일스톤 특성**: type이 아니라 속성(is_milestone: true). milestone_group의 자식으로 생성 시 자동 부여.
- **milestone_date**: is_milestone: true인 goal/project/task에서만 필수.
- **order_index**: milestone_group 내 마일스톤 순서 지정.
- **트리 유연성**: project > goal 구성 가능

---

## 3. **트리 구조 관계 예시 (10차 피드백 반영)**

### **예시 1: 건강 관리 목표**
```
[goal] "건강한 삶"  
  └─ [project] "12주 운동 챌린지"  
        ├─ [milestone_group] "주차별 목표"
        │     ├─ [task, is_milestone: true] "1주차 완료"
        │     └─ [task, is_milestone: true] "2주차 완료"
        ├─ [routine] "매일 30분 운동"
        └─ [task] "운동 계획 세우기"
```

### **예시 2: 프로젝트 개발 목표**
```
[goal] "나만의 서비스 만들기"
  └─ [project] "할일 정리 앱 개발"
        ├─ [milestone_group] "개발 단계"
        │     ├─ [task, is_milestone: true] "MVP UI 완성"
        │     └─ [task, is_milestone: true] "기본 기능 구현"
        ├─ [routine] "매일 1시간 코딩"
        └─ [task] "디자인 시안 확정"
```

---

## 4. **루틴 vs 프로젝트 구분 요약 표 (10차 피드백 반영)**

| 항목 | 루틴 | 프로젝트 |
|------|------|----------|
| 성격 | 반복 | 단발적 실행 |
| 분석 지표 | 수행률 기반 | 진행률 기반 |
| 일정 기준 | frequency, start_date | start_date ~ end_date |
| 실패 기록 | 있음 (failed_logs) | 없음 |
| 완료 기준 | 지속적 수행 | 최종 완료 |
| 자식 노드 | 불가능 | 가능 (goal, task, routine 등) |

---

## 5. **각 노드별 고유 필드 차이 명시**

| 타입 | 기간 필드 | 체크 가능 | 반복 수행률 | 마일스톤 지정 가능 | 분석 대상 여부 | 비고 |
|------|-----------|-----------|-------------|-------------------|----------------|------|
| goal | (선택) | X | X | ✅ | ✅ | 트리 중심, 추상적 목표 |
| project | ✅ (필수) | X | X | ✅ | ✅ | 구체적 실행 단위, 기간 필수 |
| task | due_date | ✅ | X | ✅ | ✅ | 단발성 할일, 체크 가능 |
| other_task | due_date | X | X | ❌ | ❌ | 캘린더 표시용, 체크 불가 |
| routine | start_date, frequency | X | ✅ | ❌ | ✅ (루틴 탭에서만) | 반복 습관, 수행률 계산 |
| milestone_group | X | X | X | ✅ | ✅ | 마일스톤 묶음, 순서 중요 |
| aspiration | X | X | X | ❌ | ❌ | 아이디어 저장소, 트리와 무관 |

---

## 6. **진행률/수행률/통계 정책**

### **진행률 계산 기준**
- **goal, project, milestone_group만 표시** (자식에 루틴이 없을 때만) // 정책
- 자식 중 체크 가능한 항목(task, project 등) 기준, 모두 완료 시 100% // 정책
- **루틴이 포함된 경우 진행률에서 제외** → UI에 "루틴은 진행률에 포함되지 않음" 표시 // UI 정책
- **분석 탭의 통계 그래프에서도 동일하게 적용**: project의 완료율 분석 그래프에서 routine의 수행률은 포함되지 않음 // 정책

### **루틴 수행률 계산 기준 (구체화)**
- **예시**: 주 3회 루틴의 경우 해당 주에 몇 번 수행했는지 %로 표시
- **계산 방식**: (실제 수행 횟수 / 예상 수행 횟수) × 100
- **표시 방법**: 주간/월간 단위로 수행률 표시, 연속 성공일 수, 난이도 조정 히스토리 등 별도 지표

### **분석/통계**
- **프로젝트/마일스톤**: 진행률, 달성률, 기간별 완료율
- **루틴**: 수행률, 연속 성공, 난이도 조정 패턴, 요일/시간대별 수행률
- **전체 집중도**: 요일/주/월별 활동량, 히트맵

---

## 7. **루틴 관련 설계 핵심**

### **루틴 vs 태스크 구분**
- **루틴**: 반복되는 행동 (예: 매일 운동, 주 3회 독서, 매주 일요일 명상)
- **태스크**: 단발성 (예: 내일 병원 예약하기, 이번 주 보고서 제출, 다음 달 회의 준비)

### **루틴 수행 이력 관리**
- **루틴은 수행률 계산** (주간/월간) // 정책
- **performed_dates**: 성공한 수행 기록만 저장 // DB 구조
- **failed_logs**: 실패한 경우만 저장 // DB 구조
- **중복 방지**: 같은 날짜가 두 곳에 중복으로 기록되지 않도록 규칙 적용 // 정책
- **routine의 failed_logs는 하루 1개만 기록 가능** // 정책

#### **수행 이력 구조 예시**
```json
// 성공한 경우만 performed_dates에 저장
performed_dates: [{ date: "2025-06-19", success: true }]

// 실패한 경우만 failed_logs에 저장
failed_logs: [
  {
    date: "2025-06-20",
    reason: "너무 피곤해서 못 함",
    mood: "무기력",
    context: "전날 야근"
  }
]
```

### **루틴 카테고리 구조 확정**
- **루틴 category는 고정 분류 + 사용자 정의 허용** (단일 TEXT 권장) // UI 정책
- **구조**: 단일 TEXT 필드로 확정 // DB 구조
- **구현 방식**: 고정된 기본 카테고리는 UI에서 추천값으로 제공, 사용자는 직접 원하는 문자열을 입력 가능
- **예시**: `"category": "명상"` (TEXT 단일 필드)

#### **기본 카테고리 예시**
- 감정관리, 운동, 외형관리, 학습, 업무, 건강관리, 취미 등

### **루틴 실패 기록 시스템**

#### **입력 시점 및 UI 흐름**
- **입력 시점**: 하루 피드백 페이지에서 루틴 수행률 확인할 때
- **트리그**: 해당 루틴이 예정된 날인데 수행하지 않은 경우
- **UI**: "실패 이유 기록하기" 버튼 또는 팝업 표시
- **입력 항목**: date, routine_id, reason, mood, context

#### **연결 기능**
- 루틴 상세페이지에서 실패 기록 타임라인 제공
- 분석 탭에서 실패 사유/감정별 분포 시각화 가능
- 실패 원인별 통계 (피로, 일정 충돌, 동기 저하 등)
- 감정/컨텍스트 기반 실패 예측 또는 알림
- 실패 이유별 개선 추천 (예: 알림 강화, 루틴 시간대 조정 등)

---

## 8. **감정일기 관련 핵심**

### **mood_tag 구조**
- **mood_tag는 TEXT** (ENUM 아님), 사용자 정의 허용 // DB 구조
- **기본 제공 감정 예시**: '기쁨', '불안', '좌절', '보람', '화남', '무감정'
- **기능**: 기본 감정 선택 + **사용자 정의 감정 추가** 기능 제공
- **구현 방식**: 기본 감정 목록은 프론트에서 추천값으로 제공

### **기본 구조**
- **하루 여러 개 작성 가능**, 날짜 기준 // 정책
- **routine과 직접 연동은 없음** (추후 linked_routine_id 확장 가능) // 정책
- 홈페이지 "오늘 하루 피드백"에서 감정일기 작성 유도
- **MVP에서는 emotion_journal ↔ routine.failed_logs 간 연동 없음** // 정책
- **추후 확장 가능성 고려**: emotion_journal에 linked_routine_id 필드 도입 가능성 고려

### **emotion_journal → routine 연동 고려 사항**

#### **구체적인 활용 시나리오**
- **감정-실패 연동 분석**: 감정일기 중 "무기력" 감정이 특정 루틴 실패와 자주 연관된다면 → 사용자에게 동기부여 루틴 제안
- **성취감 기반 정렬**: "성취감"이 높은 루틴 위주로 정렬 표시
- **감정 패턴 분석**: 특정 감정 상태에서 루틴 수행률이 높아지는 패턴 발견
- **개인화된 추천**: 사용자의 감정 상태에 따라 적합한 루틴 난이도 조정 제안

#### **구현 예시**
```json
// emotion_journal에 linked_routine_id 추가 시
{
  "id": "ej_001",
  "date": "2025-06-20",
  "content": "오늘 운동을 못했는데 기분이 좋지 않다",
  "mood_tag": "무기력",
  "linked_routine_id": "routine_001",  // 추후 확장
  "created_at": "2025-06-20T10:00:00Z"
}
```

---

## 9. **트리뷰(목표트리) 정책**

- 피그마 스타일 드래그/확대/축소/이동 // UI 정책
- 자식 노드 추가만 가능, 수정/삭제는 상세페이지에서 // UI 정책
- 각 노드 클릭 시 상세페이지 이동 // UI 정책
- **필터**: 루틴/할일 숨기기 기능(복잡한 트리 시 가독성 향상) // UI 정책
- **노드 고정**: 사용자가 원하는 goal, project 노드를 수동 고정 // UI 정책
- **고정 방식**: 시스템 자동 고정이 아닌 사용자 지정 방식 // 정책

---

## 10. **트리뷰 외 UI 구성 명확화**

### **UI 구성 및 역할 분리**
- **트리뷰**: 목표-프로젝트-할일의 계층 구조 표시, 전체적인 목표 관리
- **홈 대시보드**: 오늘의 할일, 루틴 체크, 감정일기 작성 유도
- **루틴 전용 뷰**: 루틴 목록, 수행률, 난이도 조정, 실패 기록 관리
- **분석 탭**: 통계, 그래프, 히트맵 등 데이터 시각화
- **캘린더 뷰**: 일정 관리, 날짜별 할일/루틴 표시
- **리스트 뷰**: 트리뷰 보조, 필터/정렬 기능

### **데이터 흐름 및 상호작용**
- **루틴**: 트리에도 포함되지만, 홈 대시보드/분석/루틴전용 뷰에서도 동시에 다뤄짐
- **겹치는 데이터 표현**: 각 뷰에서 동일한 루틴 데이터를 다른 관점으로 표시
- **상호작용 정리**: 루틴 수정 시 모든 관련 뷰에서 동기화 필요
- **데이터 일관성**: 트리뷰에서의 변경사항이 다른 뷰에 즉시 반영되도록 설계

### **뷰별 데이터 표시 방식**
| 뷰 | 주요 표시 데이터 | 상호작용 방식 |
|----|------------------|----------------|
| 트리뷰 | 계층 구조, 진행률 | 드래그/드롭, 확대/축소 |
| 홈 대시보드 | 오늘 할일, 루틴 체크 | 빠른 체크, 간단한 수정 |
| 루틴 뷰 | 수행률, 난이도, 실패 기록 | 상세 관리, 히스토리 |
| 분석 탭 | 통계, 그래프, 추이 | 필터링, 기간 선택 |
| 캘린더 | 일정, 날짜별 할일 | 날짜 선택, 일정 추가 |

---

## 11. **task와 other_task 구분 명확화**

### **task**
- **체크 기능**: checked 필드 포함 // DB 구조
- **날짜**: due_date 필드
- **용도**: 구체적 할일, 완료 여부 추적 가능

### **other_task**
- **체크 기능**: 없음 (checked 필드 없음) // DB 구조
- **날짜**: due_date 필드만
- **용도**: 캘린더 상 표시용 일정, 체크 불가능한 일정
- **UI**: 캘린더와 홈에서만 표시, 체크박스 없음 // UI 정책

---

## 12. **aspiration(아이디어/버킷리스트) 정책**

- 하고 싶은 일, 아이디어, 도전하고 싶은 것 등 별도 페이지에서 관리
- 중요도, 카테고리, 작성일, linked_goal_id(추후 목표/프로젝트 전환 대비) 등 필드
- 트리와 직접 연결되지 않음 // 정책

---

## 13. **주요 정책 요약**

- **진행률은 goal/project만 표시, routine 포함 시 제외** // 정책
- **트리뷰 고정 노드는 사용자 지정 방식** // 정책
- **aspiration은 트리와 무관, linked_goal_id 필드로 추후 전환 고려** // 정책
- **soft-delete 정책 존재** // 정책
- **모든 히스토리(수정/삭제/난이도 등) 기록**: 데이터 신뢰성 및 분석 확장성 확보 // 정책

---

## 14. **데이터 스키마 요약**

### **공통 필드**
```sql
id, type, title, parent_id, description, order, created_at, updated_at, deleted
```

### **goal/project/task**
```sql
is_milestone (boolean)
milestone_date (nullable, is_milestone: true일 때만)
order_index (milestone_group 내 순서)
start_date, end_date (project)
due_date (task, other_task)
checked (task만, other_task는 없음)
```

### **routine**
```sql
start_date, frequency, category (TEXT 단일 필드, 기본 카테고리 + 사용자 정의 허용)
performed_count, performed_dates (성공한 수행 기록만: [{ date, success: true }])
failed_logs (JSON: 실패 기록만 별도 저장)
difficulty_history (JSON: change_type, reason, before/after_description, date)
history_log (루틴 설정 변경 이력: 빈도, 카테고리 등)
created_at, updated_at
```

### **aspiration**
```sql
category, importance, linked_goal_id (nullable, 추후 목표 전환 대비)
created_at
```

### **emotion_journal**
```sql
id, date, content, created_at, mood_tag (TEXT, nullable, 사용자 정의 가능)
linked_routine_id (nullable, 추후 확장 대비)
```

---

## 15. **개발/설계 우선순위**

1. **데이터베이스 스키마 상세 설계** (10차 피드백 반영)
2. **API 엔드포인트 설계**
3. **컴포넌트 구조 설계** (홈, 트리뷰, 루틴, 감정일기, 캘린더, 분석, 아이디어)
4. **MVP**: 홈/트리뷰/루틴/감정일기 우선 개발
5. **캘린더/분석/아이디어는 2차 개발**

---

## 16. **10차 피드백 반영 주요 변경사항**

✅ **트리 구조 관계 예시 추가**: 
- 건강 관리 목표와 프로젝트 개발 목표의 구체적인 트리 구조 예시 제공
- 모델/개발자가 구조를 빠르게 추론할 수 있는 시각적 예시 삽입

✅ **루틴 vs 프로젝트 구분 요약 표 추가**: 
- 루틴과 프로젝트의 성격, 분석 지표, 일정 기준, 실패 기록 등을 비교하는 표 추가
- AI 모델이 역할을 혼동하지 않도록 명확한 구분 제공

✅ **정책/구조/UI 구분 태그 삽입**: 
- 각 기능별로 해당 항목이 정책인지(DB 규칙인지), 구조 정의인지, UI 정책인지 명시
- 설계 충돌 방지, 확장 시 일관성 유지, MVP 단계 명확화에 도움

---

## 17. **향후 고려 가능 항목 (확장 기능)**

### **루틴 자동 난이도 조정 추천 기능**
- 일정 기간 수행률 저조하면 "난이도 낮출까요?" 추천
- 반대로 너무 쉽게 성공 중이면 "한 단계 높일까요?" 추천
- 현재는 수동 조정만, 추후 추천 알고리즘 구현 가능

### **emotion_journal 감정 필터링/검색/시각화 강화**
- 기쁨/불안 등으로 목록 필터
- 그래프로 감정 변화 추이 보기
- 사용자가 직접 만든 감정 태그도 포함되게 필터링
- 감정 히트맵, 주간/월간 감정 그래프

### **goal/project 리스트 기반 관리 보조**
- 트리뷰 외 별도의 리스트/보드/캘린더 뷰 지원
- 미완료 프로젝트만 보기, 시작일 순 정렬, 즐겨찾기한 목표 리스트
- 필터/정렬 기능으로 트리뷰를 보조하는 대시보드 형태
- 트리 구조가 복잡할 때 유용한 보조 뷰

### **루틴 수행 이력 상세 구조화**
- performed_dates를 단순 배열이 아닌 구조화된 기록으로 저장
- 예: [{ date: "2025-06-18", success: true, note: "좋은 컨디션" }, ...]
- 추후 수행 조건, 이유, 실패 이유 분석도 가능

### **emotion_journal ↔ routine 연동 확장**
- emotion_journal에 linked_routine_id 필드 도입
- 감정일기와 루틴 실패 기록 간 연동 기능
- 감정 상태와 루틴 수행률 간 상관관계 분석
- 개인화된 루틴 추천 시스템

---

## 18. 2025-07-02 추가 진행상황 및 변경사항

### ✅ 최상위 목표만 반환하는 API 추가
- GET /api/v1/goals/root: parent_id가 없는 최상위 목표(최종 목표)만 반환하는 엔드포인트 신설
- 프론트엔드 트리뷰(목표 리스트) 페이지에서 해당 API로 최상위 목표만 받아오도록 리팩토링
- 기존 /api/v1/goals/1/tree 하드코딩 문제 해결, 동적 구조로 개선

### ✅ 전체 진행상황 요약
- 목표/트리 CRUD UI 및 API 연동, 라우팅, UX, 오류 처리 등 실제 서비스 수준으로 구현 및 개선
- 프론트-백엔드 API 경로/프록시 문제 해결
- 목표 생성 시 order 입력란 제거, 시스템 자동 관리로 UX 개선
- 트리뷰 첫 화면에서 최상위 목표 리스트만 받아오도록 구조 리팩토링
- 백엔드에 root goals 전용 API 추가, 문서화
- 문서 및 명세 최신화

이 구조와 정책을 기준으로 개발을 진행하면 되고,  
추가로 보완하거나 강조하고 싶은 점이 있으면 언제든 알려줘!  
이 정리를 계속 참고해서 설계/구현을 이어가면 돼. 

최상위 목표, root goal, 최상위 목표 리스트 등 용어를 최종목표, 최종목표 리스트로 통일
혼동 방지 안내 추가 

---

## 19. 2025-07-03 추가 진행상황 및 변경사항

### ✅ 최종목표 및 하위 전체 삭제 API hard delete로 변경
- DELETE /api/v1/goals/{goal_id}/tree: soft delete(논리삭제)에서 hard delete(실제 DB 삭제)로 정책 변경
- 이제 해당 최종목표와 모든 하위 노드가 DB에서 완전히 삭제됨(복구 불가)
- 프론트엔드 삭제모드 UI/로직은 그대로 사용, 백엔드만 완전 삭제로 동작
- 문서 및 명세에 hard delete임을 명확히 표기, 주의사항 강조

### ✅ 전체 진행상황 요약
- 최종목표 리스트/트리 구조 분리 및 용어 통일
- 최종목표 추가/삭제/트리 상세 진입 등 주요 UX 완성
- 백엔드 트리 전체 삭제 API hard delete로 변경 및 문서화
- 문서 및 명세 최신화 

## [정책 추가] 마일스톤 그룹의 부모 타입(parent_type) 명확화
- milestone_group(마일스톤 그룹)의 parent_type은 'goal', 'project' 모두 허용한다.
- 즉, 목표(goal)와 프로젝트(project) 모두 마일스톤 그룹의 부모가 될 수 있다.
- 트리 구조 예시:
  - [goal] → [milestone_group] (허용)
  - [project] → [milestone_group] (허용)
- 백엔드/프론트 모두 이 정책을 따라야 하며, 정책이 애매할 경우 이 내용을 기준으로 한다. 